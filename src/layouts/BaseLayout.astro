---
import "../pages/_app.css";
const {
  title = "Cl√≠nica Dental",
  description = "Odontolog√≠a integral en Barcelona",
  locale = "es",
  alternates
} = Astro.props;

/* Localizaci√≥n por defecto */
const i18n = {
  es: { title: "Cl√≠nica Dental", description: "Odontolog√≠a integral en Barcelona" },
  en: { title: "Dental Clinic", description: "Comprehensive dentistry in Barcelona" },
  ca: { title: "Cl√≠nica Dental", description: "Odontologia integral a Barcelona" },
};

const isDefaultTitle = title === "Cl√≠nica Dental";
const isDefaultDesc  = description === "Odontolog√≠a integral en Barcelona";
const pageTitle       = isDefaultTitle ? (i18n[locale]?.title ?? title) : title;
const pageDescription = isDefaultDesc  ? (i18n[locale]?.description ?? description) : description;
---

<html lang={locale}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preload" as="image" href="/assets/hero.png" />

    <!-- Preconexiones generales -->
    <link rel="dns-prefetch" href="https://www.google.com" />
    <link rel="preconnect" href="https://www.google.com" crossorigin />
    <link rel="dns-prefetch" href="https://maps.googleapis.com" />
    <link rel="preconnect" href="https://maps.googleapis.com" crossorigin />
    <link rel="dns-prefetch" href="https://maps.gstatic.com" />
    <link rel="preconnect" href="https://maps.gstatic.com" crossorigin />

    <!-- Preconexiones Crisp -->
    <link rel="dns-prefetch" href="https://client.crisp.chat" />
    <link rel="preconnect" href="https://client.crisp.chat" crossorigin />
    <link rel="preconnect" href="https://storage.crisp.chat" crossorigin />
    <link rel="preconnect" href="https://client.relay.crisp.chat" crossorigin />

    {alternates && (
      <>
        <link rel="alternate" hreflang="es" href={alternates.es} />
        <link rel="alternate" hreflang="ca" href={alternates.ca} />
        <link rel="alternate" hreflang="en" href={alternates.en} />
        <link rel="alternate" hreflang="x-default" href={alternates.es} />
      </>
    )}
  </head>

  <body>
    <slot />

    <!-- FAB del chat -->
    <button id="chat-fab" class="chat-fab" aria-label="Abrir chat">
      <img src="/assets/icons/chat.svg" alt="Chat" />
    </button>

    <!-- Banner de cookies (sin fondo) -->
    <div id="cookie-banner" class="ck-banner" hidden role="dialog" aria-labelledby="ck-title">
      <div class="ck-content">
        <h2 id="ck-title">Tu privacidad nos importa</h2>
        <p class="ck-text">
          Usamos cookies para funcionalidades opcionales como el chat y contenido de terceros.
          Solo se activar√°n si aceptas. Puedes cambiar tu decisi√≥n cuando quieras.
        </p>
        <div class="ck-actions">
          <button id="ck-reject" class="btn btn--ghost" type="button">Rechazar</button>
          <button id="ck-accept" class="btn" type="button">Aceptar</button>
        </div>
        <p class="ck-links">
          <a href="/es/cookies">Pol√≠tica de cookies</a> ¬∑
          <a href="/es/privacidad">Pol√≠tica de privacidad</a>
        </p>
      </div>
    </div>

    <!-- =============== SCRIPTS UNIFICADOS =============== -->
    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        // ---- Constantes/refs
        const LS_KEY   = "cookieConsent";     // preferencia global persistente
        const $fab     = document.getElementById("chat-fab");
        const $banner  = document.getElementById("cookie-banner");
        const $accept  = document.getElementById("ck-accept");
        const $reject  = document.getElementById("ck-reject");

        // ---- Helpers de almacenamiento (seguros)
        function getConsent(){
          try{ const raw = localStorage.getItem(LS_KEY); return raw? JSON.parse(raw) : null; }
          catch(e){ console.warn("localStorage get:", e.message); return null; }
        }
        function setConsent(status){
          const payload = { status, necessary:true, ts:new Date().toISOString() };
          try{ localStorage.setItem(LS_KEY, JSON.stringify(payload)); } catch(e){ console.warn("localStorage set:", e.message); }
          return payload;
        }

        // ===== CRISP loader (Promise) =====
        function ensureCrispLoaded(){
          if (window.$crisp && typeof window.$crisp.push === "function") return Promise.resolve();
          if (window.__crispLoading instanceof Promise) return window.__crispLoading;

          window.$crisp = window.$crisp || [];
          window.$crisp.push(["config", "hide:launcher", true]);
          window.CRISP_WEBSITE_ID = "b41a23ca-7594-4f9d-aaa6-3b7ca9cb3157";

          window.__crispLoading = new Promise((resolve, reject) => {
            const s = document.createElement("script");
            s.src = "https://client.crisp.chat/l.js";
            s.async = true; s.defer = true;
            s.onload = () => resolve();
            s.onerror = reject;
            document.head.appendChild(s);
          });

          return window.__crispLoading;
        }

        // ---- Banner (sin fondo)
        function openBanner(){ $banner.hidden = false; }
        function closeBanner(){ $banner.hidden = true;  }

        // Exponer para otros scripts
        window.showCookieBanner = openBanner;

        // ---- Estado inicial
        // => Mostrar SIEMPRE si no hay decisi√≥n o si es "rejected"
        const prev = getConsent();
        const hasAccepted = prev?.status === "accepted";
        if (!prev || prev.status === "rejected") {
          openBanner();
        } else if (hasAccepted) {
          // Precargar Crisp en idle para que el primer clic sea inmediato
          (window.requestIdleCallback ? requestIdleCallback : (fn)=>setTimeout(fn, 800))(
            () => { ensureCrispLoaded().catch(()=>{}); }
          );
        }

        // ---- Acciones del banner
        $accept?.addEventListener("click", (e)=>{
          e.preventDefault(); e.stopPropagation();
          setConsent("accepted");           // consentimiento global persistente
          closeBanner();
          ensureCrispLoaded().then(() => {
            window.dispatchEvent(new Event("cookie:accepted"));
          }).catch(()=>{});
        });

        $reject?.addEventListener("click", (e)=>{
          e.preventDefault(); e.stopPropagation();
          setConsent("rejected");           // rechazo global; se seguir√° mostrando en cada carga
          closeBanner();
          window.dispatchEvent(new Event("cookie:rejected"));
        });

        // ---- Chat helpers
        function openChat(){
          try {
            window.$crisp.push(["do","chat:show"]);
            window.$crisp.push(["do","chat:toggle"]);
          } catch {}
        }

        // üëâ NUEVO: ‚Äúconsentimiento por acci√≥n‚Äù SOLO DE UNA VEZ (sesi√≥n)
        // - Si NO hay "accepted" global, NO tocamos localStorage.
        // - Marcamos un flag temporal de sesi√≥n, cargamos el script y abrimos.
        function allowOneTimeCrispForThisSession(){
          try { sessionStorage.setItem("temp:crisp", "1"); } catch {}
        }
        function hasOneTimeCrispThisSession(){
          try { return sessionStorage.getItem("temp:crisp") === "1"; } catch { return false; }
        }

        // ---- FAB del chat
        $fab?.addEventListener("click", ()=>{
          const global = getConsent();         // puede ser null / accepted / rejected
          const globallyAccepted = global?.status === "accepted";

          if (globallyAccepted) {
            // Ya hab√≠a consentimiento -> aseguramos script listo y abrimos
            ensureCrispLoaded().then(openChat).catch(()=>{});
            return;
          }

          // Si NO hay aceptado global (null o rejected):
          // -> NO cambiamos localStorage
          // -> Permitimos uso puntual (solo esta sesi√≥n) y NO ocultamos el banner
          allowOneTimeCrispForThisSession();
          ensureCrispLoaded().then(() => {
            // Nota: NO hacemos closeBanner(); el banner sigue visible
            window.dispatchEvent(new Event("cookie:one-time:crisp"));
            openChat();
          }).catch(()=>{});
        });

        // ---- Ocultar launcher nativo de Crisp si aparece
        function nukeCrispLauncher() {
          document.querySelectorAll(".cc-yv368 .cc-1kr6o .cc-18ov6 .cc-1qbp0").forEach(el => el.remove());
        }
        const observer = new MutationObserver(nukeCrispLauncher);
        observer.observe(document.body, { childList:true, subtree:true });
        window.addEventListener("crisp:ready", () => { nukeCrispLauncher(); setTimeout(nukeCrispLauncher, 500); });
      });
    </script>
  </body>
</html>
